import axios, { AxiosRequestConfig, AxiosResponse } from "axios"

const api_path = "http://localhost:6080/api/v1";

export const get = <T>(path: string, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> => {
    return axios.get(`${api_path}/${path}`, config)
}
export type Repo = Record<string, {
    'url': string,
    'ms-between-poll': string,
    'vcs': string,
    'enable-poll-updates': boolean
}>;
type APIResponse<T> = Promise<AxiosResponse<T>>
export const fetchRepos = (): APIResponse<Repo> => {
    return get('repos');
}

export type SearchResults = {
    Results: Record<string, Result>
    Stats: {
        FilesOpened: number,
        Duration: number
    }
};
export type Result = {
    FilesWithMatch: number,
    Revision: string,
    Matches: MatchResult[],
}
export type MatchResult = {
    Filename: string,
    Matches: Match[],
    Autogenerated: boolean,
};

export type Match = {
    Line: string,
    LineNumber: number,
    Before: string[],
    After: string[]
};

/**
 * 
 * {
 * 	"GET": {
 * 		"scheme": "http",
 * 		"host": "localhost:6080",
 * 		"filename": "/api/v1/search",
 * 		"query": {
 * 			"stats": "fosho",
 * 			"repos": "*",
 * 			"rng": ":20",
 * 			"q": "test",
 * 			"files": "",
 * 			"excludeFiles": "",
 * 			"i": "nope",
 * 			"literal": "nope"
 * 		},
 * 		"remote": {
 * 			"Address": "[::1]:6080"
 * 		}
 * 	}
 * }
 */
type SearchQueryParams = {
    "stats": boolean,
    "repos": string,
    "rng": string,
    "q": string,
    "files": string,
    "excludeFiles": string,
    "i": boolean,
    "literal": boolean,
}

export const fetchSearchResults = (queryParams: SearchQueryParams): APIResponse<SearchResults> => {
    return get('search', {
        params: queryParams
    })
}

export const queryFn = async ({ queryKey }: any) => {
    const { data } = await axios.get(`${api_path}/${queryKey}`);
    return data;
}